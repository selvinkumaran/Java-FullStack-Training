@SpringBootApplication:
-----------------------
         --> It is a combination of three annotations 
                --> * @EnableAutoConfiguration
                --> * @ComponentScan
                --> * @Configuration
            
@GetMapping
         It maps the HTTP GET requests on the specific handler method
         It is used to create a web service endpoint that fetches It is used instead of using: @RequestMapping(method = RequestMethod.GET)

@PostMapping
         It maps the HTTP POST requests on the specific handler method
         It is used to create a web service endpoint that creates It is used instead of using: @RequestMapping(method = RequestMethod.POST)

@PutMapping
         It maps the HTTP PUT requests on the specific handler method
         It is used to create a web service endpoint that creates or updates It is used instead of using: @RequestMapping(method = RequestMethod.PUT)

@DeleteMapping
         It maps the HTTP DELETE requests on the specific handler method
         It is used to create a web service endpoint that deletes a resource. It is used instead of using: @RequestMapping(method = RequestMethod.DELETE)

@PatchMapping
         It maps the HTTP PATCH requests on the specific handler method
         It is used instead of using: @RequestMapping(method = RequestMethod.PATCH)

@RequestBody
         It is used to bind HTTP request with an object in a method parameter
         Internally it uses HTTP MessageConverters to convert the body of the request. When we annotate a method parameter with @RequestBody, the Spring framework binds the incoming HTTP request body to that parameter.

@ResponseBody
         It binds the method return value to the response body
         It tells the Spring Boot Framework to serialize a return an object into JSON and XML format.

@PathVariable
         It is used to extract the values from the URI
         It is most suitable for the RESTful web service, where the URL contains a path variable. We can define multiple @PathVariable in a method.

@RestController
         It can be considered as a combination of @Controller and @ResponseBody annotations
         The @RestController annotation is itself annotated with the @ResponseBody annotation
         It eliminates the need for annotating each method with @ResponseBody.

JPA(Java persistance API) 
-------------------------
    ->Annotations
        ->@Entity
        - @Primary
        - @Id
        - @Generatevalue
        - @Table(name = "table_person") 
        - @Column(name = "address")
        - @Transaction
        - @Getter
        - @Setter
        - @NoArgsConstructor
        - @AllArgsConstructor
    ->Relations
        - @OneToOne
        - @OneToMany 
        - @ManyToOne 
        - @ManyToMany
        - @JoinColumn